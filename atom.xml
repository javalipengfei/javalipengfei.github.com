<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[漫步云端]]></title>
  <link href="http://javalipengfei.github.io/atom.xml" rel="self"/>
  <link href="http://javalipengfei.github.io/"/>
  <updated>2013-10-23T19:12:27+08:00</updated>
  <id>http://javalipengfei.github.io/</id>
  <author>
    <name><![CDATA[李鹏飞]]></name>
    <email><![CDATA[javalipengfei@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ios开发 AudioToolBox框架音频播放的点滴]]></title>
    <link href="http://javalipengfei.github.io/blog/2013/10/23/ioskai-fa-audiotoolboxkuang-jia-yin-pin-bo-fang-de-dian-di/"/>
    <updated>2013-10-23T17:24:00+08:00</updated>
    <id>http://javalipengfei.github.io/blog/2013/10/23/ioskai-fa-audiotoolboxkuang-jia-yin-pin-bo-fang-de-dian-di</id>
    <content type="html"><![CDATA[<blockquote><h4>今天研究了一下AudioToolBox苹果的音频开发框架。在我的不懈坚持下，终于可以放出声来了。但是仅仅是能放出声，对于一个追求强大的程序员来说这只是一个开始，虽然艰难，但是开始了 哈哈，下面呈上我对AudioToolBox播放音频的理解。</h4>

<h4>首先写代码之前要先了解流程才能事半功倍，下面是我用我的英语(你懂的)翻译的苹果官方网站的一些资料</h4>

<ol>
<li>首先定一个客户端机构体去管理状态，格式和路径等信息</li>
<li>写一个音频队列方法去执行音频的播放</li>
<li>写一个方法去计算音频队列流的大小</li>
<li>创建一个音频队列并且配置播放</li>
<li>为音频队列流开空间并且加入到队列，告诉音频队列开始播放，当做完这些，播放方法会调用回调方法这个音频队列播放完毕。</li>
<li>清除音频队列，并且释放资源。</li>
</ol>
</blockquote>

<h4>大概流程就这样的 我们只要按照这个流程去做就可以播放出美妙的音乐了 。我们来一一接受流程的步骤</h4>

<h2>首先介绍客户端结构的的数据结构</h2>

<p>struct AQPlayerState {</p>

<pre><code>AudioStreamBasicDescription  mDataFormat;                    // 1

AudioQueueRef                 mQueue;                         // 2

AudioQueueBufferRef           mBuffers[kNumberBuffers];       // 3

AudioFileID                   mAudioFile;                     // 4

UInt32                        bufferByteSize;                 // 5

SInt64                        mCurrentPacket;                 // 6

UInt32                        mNumPacketsToRead;              // 7

AudioStreamPacketDescription  *mPacketDescs;                  // 8

bool                          mIsRunning;                     // 9
</code></pre>

<p>};</p>

<ol>
<li>对音频流基本信息的描述(包含比特率，帧之类的信息，是音乐流中的含有的数据，你会通过方法获得其中的数据) 是一个结构体</li>
<li>音频队列</li>
<li>音频队列流</li>
<li>音频文件</li>
<li>音频队列中字节数的大小</li>
<li>包的索引值 意味着下一个包将会用于播放</li>
<li>读取的包的数量</li>
<li>音频流中包的基本信息的描述 也是一个结构体</li>
<li>判断当前的音频队列是否还在播放

<h4>这个结构体主要存储一些播放用的状态，数据格式等。</h4></li>
</ol>


<h2>写一个音频队列方法去执行音频的播放（这是一个回调方法）</h2>

<p>static void HandleOutputBuffer (</p>

<pre><code>void                 *aqData,                 // 1
AudioQueueRef        inAQ,                    // 2
AudioQueueBufferRef  inBuffer                 // 3
</code></pre>

<p>)</p>

<ol>
<li>上面创建的客户端机构体</li>
<li>音频队列</li>
<li>音频流</li>
</ol>


<h4>用于读取包中的数据到音频队列流中 在将音频队列流加入到音频队列中 AudioQueue一旦填满队列就会自动播放当播放完一个流的时候播放下一个音频流，当前流队列会推出来并且被填满数据。下面是具体实现方法：</h4>

<p>static void HandleOutputBuffer (</p>

<pre><code>void                *aqData,
AudioQueueRef       inAQ,
AudioQueueBufferRef inBuffer
</code></pre>

<p>) {</p>

<pre><code>AQPlayerState *pAqData = (AQPlayerState *) aqData;        // 1
if (pAqData-&gt;mIsRunning == 0) return;                     // 2
UInt32 numBytesReadFromFile;                              // 3
UInt32 numPackets = pAqData-&gt;mNumPacketsToRead;           // 4
AudioFileReadPackets (
    pAqData-&gt;mAudioFile,
    false,
    &amp;numBytesReadFromFile,
    pAqData-&gt;mPacketDescs, 
    pAqData-&gt;mCurrentPacket,
    &amp;numPackets,
    inBuffer-&gt;mAudioData 
);
if (numPackets &gt; 0) {                                     // 5
    inBuffer-&gt;mAudioDataByteSize = numBytesReadFromFile;  // 6
   AudioQueueEnqueueBuffer ( 
        pAqData-&gt;mQueue,
        inBuffer,
        (pAqData-&gt;mPacketDescs ? numPackets : 0),
        pAqData-&gt;mPacketDescs
    );
    pAqData-&gt;mCurrentPacket += numPackets;                // 7 
} else {
    AudioQueueStop (
        pAqData-&gt;mQueue,
        false
    );
    pAqData-&gt;mIsRunning = false; 
}
</code></pre>

<p>}</p>

<ol>
<li>客户端结构体 前面提到的。</li>
<li>检测队列是否还在播放</li>
<li>读取的字节的数量从文件中</li>
<li>读取的包</li>
<li>假如读取的包大于0 说明还有音频 要添加到音频队列中</li>
<li>设置读取的字节数量的大小</li>
<li>设置当前读取的报的位置</li>
</ol>


<h2>写一个方法去计算音频队列流的大小</h2>

<p>void DeriveBufferSize (</p>

<pre><code>AudioStreamBasicDescription ASBDesc,                            // 1
UInt32                      maxPacketSize,                       // 2
Float64                     seconds,                             // 3
UInt32                      *outBufferSize,                      // 4
UInt32                      *outNumPacketsToRead                 // 5
</code></pre>

<p>) {</p>

<pre><code>static const int maxBufferSize = 0x50000;                        // 6
static const int minBufferSize = 0x4000;                         // 7

if (ASBDesc.mFramesPerPacket != 0) {                             // 8
    Float64 numPacketsForTime =
        ASBDesc.mSampleRate / ASBDesc.mFramesPerPacket * seconds;
    *outBufferSize = numPacketsForTime * maxPacketSize;
} else {                                                         // 9
    *outBufferSize =
        maxBufferSize &gt; maxPacketSize ?
            maxBufferSize : maxPacketSize;
}

if (                                                             // 10
    *outBufferSize &gt; maxBufferSize &amp;&amp;
    *outBufferSize &gt; maxPacketSize
)
    *outBufferSize = maxBufferSize;
else {                                                           // 11
    if (*outBufferSize &lt; minBufferSize)
        *outBufferSize = minBufferSize;
}

*outNumPacketsToRead = *outBufferSize / maxPacketSize;           // 12
</code></pre>

<p>}</p>

<ol>
<li>音频流的数据描述结构 就是我们定义的那个客户端的mDataFormat</li>
<li><p>最大包的数量 可以根据UInt32 maxPacketSize;
UInt32 propertySize = sizeof (maxPacketSize);
AudioFileGetProperty (                               // 1</p>

<p>  aqData.mAudioFile,                               // 2</p>

<p>  kAudioFilePropertyPacketSizeUpperBound,          // 3</p>

<p>  &amp;propertySize,                                   // 4</p>

<p>  &amp;maxPacketSize                                   // 5
);这个方法获得大约的最大值(这里不用读取全部数据就可以得到最大的报数的大约值)</p></li>
<li>一个音频队列流持有的时间。0.5秒是一个不错的选择</li>
<li>读取的一个音频队列流的大小</li>
<li>读取的一个音频队列包的数量</li>
</ol>


<h2>创建一个音频队列并且配置播放</h2>

<h4>打开一个音频文件</h4>

<p>AQPlayerState aqData;                                   // 1</p>

<p>OSStatus result =</p>

<pre><code>AudioFileOpenURL (                                  // 2
    audioFileURL,                                   // 3
    fsRdPerm,                                       // 4
    0,                                              // 5
    &amp;aqData.mAudioFile                              // 6
);
</code></pre>

<p>CFRelease (audioFileURL);                               // 7</p>

<ol>
<li>创建一个客户端数据结构体存储音频数据</li>
<li>打开一个音频文件</li>
<li>音频文件的url（可以用(CFURLRef)url）方式传入</li>
<li>获得读取音频文件的的权限</li>
<li>文件类型提示 不知道可以直接传入0</li>
<li>客户端结构体中音乐文件的引用</li>
</ol>


<h4>获得音频流中的数据结构描述</h4>

<p>UInt32 dataFormatSize = sizeof (aqData.mDataFormat);    // 1</p>

<p>AudioFileGetProperty (                                  // 2</p>

<pre><code>aqData.mAudioFile,                                  // 3
kAudioFilePropertyDataFormat,                       // 4
&amp;dataFormatSize,                                    // 5
&amp;aqData.mDataFormat                                 // 6
</code></pre>

<p>);</p>

<h6>参数很简单 一目了然</h6>

<h4>创建音频播放队列</h4>

<p>AudioQueueNewOutput (</p>

<pre><code>&amp;aqData.mDataFormat,                             // 1    
HandleOutputBuffer,                              // 2
&amp;aqData,                                         // 3
CFRunLoopGetCurrent (),                          // 4
kCFRunLoopCommonModes,                           // 5
0,                                               // 6
&amp;aqData.mQueue                                   // 7
</code></pre>

<p>);</p>

<ol>
<li>音频流的数据描述</li>
<li>填充并播放流到队列的回调方法</li>
<li>客户端数据</li>
<li>当前线程</li>
<li>一般运行模式</li>
<li>必须设置为0 相当于初始化</li>
<li>将队列交给客户端结构体中的队列

<h1>今天先写到这 明天更精彩 吼吼</h1></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[美好的开始]]></title>
    <link href="http://javalipengfei.github.io/blog/2013/10/17/mei-hao-de-kai-shi/"/>
    <updated>2013-10-17T16:14:00+08:00</updated>
    <id>http://javalipengfei.github.io/blog/2013/10/17/mei-hao-de-kai-shi</id>
    <content type="html"><![CDATA[<blockquote><h4>历尽各种磨难，查阅了无数资料，终于把这个博客搭建起来了。仰天长啸中。。。。。。 哈哈。。。。。。</h4>

<h4>为什么要建立这个博客呢：</h4>

<ol>
<li>我觉得建立一个博客，可以督导我每天都写一点东西，来记录生活、工作、学习，一个自己的生活纪录片.</li>
<li>通过它可以分享一下我学到的、感悟到的东西给这个世界，让世界听到我的声音</li>
<li>人非圣贤 孰能无过，有时候学到的感悟到不一定就是正确的，在这里可以与不同的声音进行交流、提高、成长。</li>
<li>。。。。。</li>
</ol>
</blockquote>

<h4>总之博客的好处让你无法拒绝它。最后感谢开源给我们带来的美好生活。启程喽。。。。。。</h4>
]]></content>
  </entry>
  
</feed>
